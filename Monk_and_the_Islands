/* Problem Link : https://www.hackerearth.com/practice/algorithms/graphs/breadth-first-search/practice-problems/algorithm/monk-and-the-islands/description/
Algorithm Used : SSSP using BFS */

#include<bits/stdc++.h>
#define fr(i,c,b) for(int i=c;i<b;i++)
#define frl(i,c,b) for(ll i=c;i<b;i++)
#define si(x) int x; cin>>x;
#define pi(x) printf("%d", x)
#define pll(x) printf("%lld", x)
#define nl printf("\n")
#define watch(x) cout << (#x) << " is " << (x) << endl
#define MAX 1000001
  
typedef long long int ll;
 
using namespace std;

vector<vector<ll>> graph;
vector<bool> visited;
ll dist[10001];

int bfs(int node,int n)
{
	queue<int> q;
	visited[node]=true;
	q.push(node);
	while(!q.empty())
	{
		node=q.front();
		q.pop();
		for(auto i:graph[node])
		{
			if(!visited[i])
			{
				visited[i]=true;
				dist[i]=dist[node]+1;
				q.push(i);
			}
		}
	}	
	return dist[n];
}

int main()
{
	si(t);
	while(t--)
	{
		si(n); si(m);
    	graph.assign(n+1,vector<ll>());
		visited.assign(n+1,false);
		fr(i,0,n+1)   dist[i]=0;
		fr(i,0,m)
   	 	{
        si(u); si(v); graph[u].push_back(v); graph[v].push_back(u);
    	}
		cout<<bfs(1,n)<<endl;

	}
}
