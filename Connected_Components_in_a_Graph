/* Problem Link : https://www.hackerearth.com/problem/algorithm/connected-components-in-a-graph */

#include<bits/stdc++.h>
#define fr(i,c,b) for(int i=c;i<b;i++)
#define frl(i,c,b) for(ll i=c;i<b;i++)
#define si(x) int x; cin>>x;
#define pi(x) printf("%d", x)
#define pll(x) printf("%lld", x)
#define nl printf("\n")
#define watch(x) cout << (#x) << " is " << (x) << endl
#define MAX 1000001
  
typedef long long int ll;
 
using namespace std;

void dfsutil(vector<vector<ll>>& graph,int node,vector<bool>&visited)
{
    visited[node]=true;
    for(auto i=graph[node].begin();i!=graph[node].end();i++)
    {
        if(!visited[*i])
        {
            dfsutil(graph,*i,visited);
        }
    }
}

int dfs(vector<vector<ll>> &graph,int n)
{
    int c=0;
    vector<bool> visited;
    visited.assign(n,false);
    for(int i=0;i<n;i++)
    {
        if(!visited[i])
        {
            dfsutil(graph,i,visited);
            c++;
        }
    }
    return c;
}

int main()
{
    si(n); si(e);
    vector<vector<ll>> graph;
    graph.assign(n,vector<ll>());
    fr(i,0,e)
    {
        si(u); si(v); u--; v--; graph[u].push_back(v); graph[v].push_back(u);
    }
    cout<<dfs(graph,n);
}
